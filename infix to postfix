#include<stdio.h>
#include<string.h>
#include<ctype.h>
char stack[25];
int top =-1;
void push(char item)
{
stack[++top]=item;
}
char pop()
{
return stack[top--];
}
//returns precedence of operators
int precedence(char symbol)
{
switch(symbol){
case'+':
case'-':
return 2;
break;
case'*':
case'/':
return 3;
break;
case'^':
return 4;
break;
case'(':
case')':
case'#':
return 1;
break;
}
}
//check wheather the symbol is operator?
int isoperator(char symbol)
{
switch(symbol)
{
case'+':
case'-':
case'*':
case'/':
case'^':
case'(':
case')':
return 1;
break;
default:
return 0;
}
}
//convert infix expression to postfix
void convert(char infix[],char postfix[])
{
int i,symbol,j=0;
stack[++top]='#';
for(i=0;i<strlen(infix);i++){
symbol=infix[i];
if(isoperator(symbol)==0)
{
postfix[j]=symbol;
j++;
}
else
{
if(symbol=='(')//check form this ‘(’ symbol
{
push(symbol);//pushes the symbol
}
else
{
if(symbol==')'){//check form this ‘)’ symbol
while(stack[top]!='('){//if this is on top
postfix[j]=pop();
j++;
}
pop(); //pop out (.
}
else{
if(precedence(symbol)>precedence(stack[top]))//if the pushing symbols precedence is higher than
the one in the stack
{ push(symbol);//pushes the symbol
}else{
while(precedence(symbol)<=precedence(stack[top]))//if the pushing symbols precedence is lesser
than or equal to the one in the stack
{
postfix[j]=pop();
j++;
}
push(symbol);//pushes the symbol
}
}
}
}
}
while(stack[top]!='#')
{
postfix[j]=pop();
j++;
}
postfix[j]='\0';//null terminate string.
}
//int stack
int stack_int[25];
int top_int=-1;
void push_int(int item){
stack_int[++top_int]=item;
}
char pop_int(){
return stack_int[top_int--];
}
//evaluates postfix expression
int evaluate(char *postfix){
char ch;
int i=0,operand1,operand2;
while ((ch=postfix[i++])!='\0'){
if(isdigit(ch))
{
push_int(ch-'0');//push the operand
}
else
{
//operator.pop two operands
operand2=pop_int();
operand1=pop_int();
switch(ch)
{
case'+':
push_int(operand1+operand2);
break;
case'-':
push_int(operand1-operand2);
break;
case'*':
push_int(operand1*operand2);
break;
case'/':
push_int(operand1/operand2);
break;
}
}
}
return stack_int[top_int];
}
void main(){
char infix[25]="1*(2+3)",postfix[25];
convert(infix,postfix);
printf("Infix expression is: %s\n",infix);
printf("postfix expression is: %s\n",postfix);
printf("Evaluated expression is: %d\n",evaluate(postfix));
}
